import java.util.Scanner;
import java.util.Vector;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();

        Vector<Long> b = new Vector<>(n + 1);
        for (int i = 1; i <= n; i++) {
            b.add(scanner.nextLong());
        }

        Vector<Long> dp = new Vector<>(n + 1);

        dp.add(0L);
        dp.add(Math.abs(b.get(1) - b.get(2)));

        for (int i = 3; i <= n; i++) {
            long value1 = dp.get(i - 1) + Math.abs(b.get(i) - b.get(i - 1));
            long value2 = dp.get(i - 2) + Math.abs(b.get(i) - b.get(i - 2));
            dp.add(Math.min(value1, value2));
        }

        System.out.println(dp.get(n));

        scanner.close();
    }
}


Minimum steps to reach max k jumps allowed.
Code;


import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        long k = scanner.nextLong();

        long[] b = new long[n + 1];
        for (int i = 1; i <= n; i++) {
            b[i] = scanner.nextLong();
        }

        long[] dp = new long[n + 1];
        Arrays.fill(dp, Long.MAX_VALUE);

        dp[1] = 0;
        dp[2] = Math.abs(b[1] - b[2]);

        for (int i = 3; i <= n; i++) {
            long answer = Long.MAX_VALUE;
            for (int j = 1; j <= k && i - j >= 1; j++) {
                long yy = dp[i - j] + Math.abs(b[i] - b[i - j]);
                answer = Math.min(answer, yy);
            }
            dp[i] = answer;
        }

        System.out.println(dp[n]);
    }
}

